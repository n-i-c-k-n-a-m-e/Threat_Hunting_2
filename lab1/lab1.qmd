---
title: "lab1"
author: Шабанов Р.В.
format:
    md:
        output-file: readme.md
    
editor: visual
---

## Цель работы

Научиться пользоваться RStudio, решить задачи из swirl

## Ход работы

## Задание 1

### In its simplest form, R can be used as an interactive calculator. Type 5 + 7 and press | Enter.

```{r}
5 + 7

```

### Think of the assignment operator as an arrow. You are assigning the value on the right side of the arrow to the variable name on the left side of the arrow.
```{r}
a <- 5
```
### To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7. This can be read as 'x gets 5 plus 7'. Give it a try now.
```{r}
x <- 5+7

```
### To view the contents of the variable x, just type x and press Enter. Try it now.
```{r}
x
```
###  Now, store the result of x - 3 in a new variable called y.
```{r}
y <- x - 3
```
### What is the value of y? Type y to find out.
```{r}
y
```
### The easiest way to create a vector is with the c() function, which stands for 'concatenate' or 'combine'. To create a vector containing the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called z.
```{r}
z <- c(1.1, 9, 3.14)
```
### Type z to view its contents. Notice that there are no commas separating the values in the output.

```{r}
z
```
### Type c(z, 555, z). Don't create a new variable. We just want to view the result.
```{r}
c(z, 555, z)
```
### | Numeric vectors can be used in arithmetic expressions. Type the following to see what happens: z * 2 + 100.
```{r}
z * 2 + 100
```
### Take the square root of z - 1 and assign it to a new variable called my_sqrt.
```{r}
my_sqrt <- sqrt(z-1)
```
### Print the contents of my_sqrt
```{r}
my_sqrt

```
### Now, create a new variable called my_div that gets the value of z divided by my_sqrt
```{r}
my_div <- z/my_sqrt

```
### Go ahead and print the contents of my_div.
```{r}
my_div

```
### Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors of different length. Don't assign the result to a variable
```{r}
c(1,2,3,4) + c(0, 10)

```
### Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.
```{r}
c(1, 2, 3, 4) + c(0, 10, 100)

```
### Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a mistake and that you meant to add 1000 instead of 100. You could either re-type the expression, or...

```{r}
z * 2 + 1000
```
### In many programming environments, the up arrow will cycle through previous commands. Try hitting the up arrow on your keyboard until you get to this command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow doesn't work for you, just type the corrected command.
```{r}
z * 2 + 1000
```
### You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most programming environments will provide a list of variables that you've created that begin with 'my'. This is called auto-completion and can be quite handy when you have many variables in your workspace. Give it a try. (If auto-completion doesn't work for you, just type my_div and press Enter.)
```{r}
my_div
```

